<?xml version="1.0"?>
<launch>
     <!-- Laser scan on topic scan (with updated frequency, see below) -->
    <remap from="sick_mrs_1xxx/scan" to="raw_scan" />
    <remap from="cloud" to="points2" />

    <arg name="hostname" default="169.254.137.36"/>
    <node name="sick_mrs_1xxx" pkg="sick_scan" type="sick_generic_caller" respawn="false" output="screen">
        <param name="scanner_type" type="string" value="sick_mrs_1xxx"/>
        <param name="slam_echo" type="string" value="laser_POS_000_DIST1"/>
        <param name="slam_bundle" type="bool" value="true"/>
        <param name="min_ang" type="double" value="-2.3998277"/>
        <param name="max_ang" type="double" value="+2.3998277"/>
        <param name="intensity_resolution_16bit" type="bool" value="False"/>
        <param name="hostname" type="string" value="$(arg hostname)"/>
        <param name="port" type="string" value="2112"/>
        <param name="timelimit" type="int" value="5"/>

       <!-- Optional range filter configuration: If the range of a scan point is less than range_min or greater than range_max, the point can be filtered. -->
        <!-- Depending on parameter range_filter_handling, the following filter can be applied for points with a range not within [range_min, range_max],   -->
        <!-- see enumeration RangeFilterResultHandling in range_filter.h:                                           -->
        <!--   0: RANGE_FILTER_DEACTIVATED,  do not apply range filter (default)                                    -->
        <!--   1: RANGE_FILTER_DROP,         drop point, if range is not within [range_min, range_max]              -->
        <!--   2: RANGE_FILTER_TO_ZERO,      set range to 0, if range is not within [range_min, range_max]          -->
        <!--   3: RANGE_FILTER_TO_RANGE_MAX, set range to range_max, if range is not within [range_min, range_max]  -->
        <!--   4: RANGE_FILTER_TO_FLT_MAX,   set range to FLT_MAX, if range is not within [range_min, range_max]    -->
        <!--   5: RANGE_FILTER_TO_NAN        set range to NAN, if range is not within [range_min, range_max]        -->
        <!-- Note: Range filter applies only to Pointcloud messages, not to LaserScan messages.                     -->
        <!-- Using range_filter_handling 4 or 5 requires handling of FLT_MAX and NAN values in an application.      -->
        <param name="range_min" type="double" value="0.05"/>
        <param name="range_max" type="double" value="60.0"/>
        <param name="range_filter_handling" type="int" value="1"/>  

        <param name="imu_enable" type="bool" value="True"/>
        <param name="imu_enable_additional_info" type="bool" value="True"/> 
        <param name="ang_res" type="double" value="0" />     <!-- Supported values are "0.0625", "0.125" and "0.25". Default: "0", i.e. do not set or overwrite angular resolution and scan frequency -->
        <param name="scan_freq" type="double" value="0" /> <!-- Supported values are "12.5", "25" and "50". Default: "0", i.e. do not set or overwrite angular resolution and scan frequency -->
    </node>

      <!-- Reduce frequency of /scan messages to ~18 Hz (set 30) for improved Cartographer performance -->
      <node pkg="topic_tools" type="throttle" name="throttle" args="messages raw_scan 30.0 scan"/>

    <!-- Transformations to see cloud-data in rviz -->
    <node pkg="tf" type="static_transform_publisher" name="laser_baselaser" args="0 0 0 0 0 0 1 base_laser laser 100"/>

    <node pkg="tf" type="static_transform_publisher" name="cloud_baselaser" args="0 0 0 0 0 0 1 base_laser cloud 100"/>

    <!-- Transformation to prepare SLAM -->
    <node pkg="tf" type="static_transform_publisher" name="laser_layer_0_first_echo_base_laser"
          args="0 0 0 0 0 0 1 base_laser laser_POS_000_DIST1 100"/>

    <node pkg="tf" type="static_transform_publisher" name="base_laser_to_base_link"
          args="0 0 0 0 0 0 1 base_link base_laser  100"/>

      <!-- IMU Link TF MOVE LATER!!! -->
      <node pkg="tf" type="static_transform_publisher" name="imu_link_to_base_link"
            args="0 0 0 0 0 0 1 base_link imu_link  100"/>

      <!-- POPULATE WITH VALUES AND MOVE TO DIFFERENT FILE -->
    <node pkg="tf" type="static_transform_publisher" name="base_link_to_base_footprint"
          args="0 0 0 0 0 0 1 base_footprint base_link  100"/>

      <!-- base link to odom (disable if using ekf or ukf which publishes this tf?) -->
    <node pkg="tf" type="static_transform_publisher" name="base_footprint_to_odom"    
          args="0 0 0 0 0 0 1 odom base_footprint 100"/>

    <node pkg="tf" type="static_transform_publisher" name="odom_to_scanmatcher"
          args="0 0 0 0 0 0 1 scanmatcher_frame odom 100"/>

    <arg name="tf_map_scanmatch_transform_frame_name" default="/scanmatcher_frame"/>
    <arg name="base_frame" default="base_link"/>
    <arg name="odom_frame" default="base_link"/>
    <!-- False since Cartographer will publish this tf -->
    <arg name="pub_map_odom_transform" default="false"/>
    <arg name="scan_subscriber_queue_size" default="5"/>
    <arg name="scan_topic" default="scan"/>
    <arg name="map_size" default="2048"/>
    <!-- Obtain visual odometry from Hector SLAM -->
    <arg name="pub_odometry" default="true"/>

    <!-- Remap /map produced by Hector since we will use map produced by Cartographer -->
    <remap from="map" to="map_hector" />

    <node pkg="hector_mapping" type="hector_mapping" name="hector_mapping" output="screen">
        <!-- Publish odometry -->
        <param name="pub_odometry" value="$(arg pub_odometry)"/>
        <!-- Frame names -->
        <param name="map_frame" value="map"/>
        <param name="base_frame" value="$(arg base_frame)"/>
        <param name="odom_frame" value="$(arg base_frame)"/>
        <!-- Tf use -->
        <param name="use_tf_scan_transformation" value="true"/>
        <param name="use_tf_pose_start_estimate" value="false"/>
        <param name="pub_map_odom_transform" value="$(arg pub_map_odom_transform)"/>
        <!-- Map size / start point -->
        <param name="map_resolution" value="0.050"/>
        <param name="map_size" value="$(arg map_size)"/>
        <param name="map_start_x" value="0.5"/>
        <param name="map_start_y" value="0.5"/>
        <param name="map_multi_res_levels" value="2"/>
        <!-- Map update parameters -->
        <param name="update_factor_free" value="0.4"/>
        <param name="update_factor_occupied" value="0.7"/>
        <param name="map_update_distance_thresh" value="0.2"/>
        <param name="map_update_angle_thresh" value="0.9"/>
        <param name="laser_z_min_value" value="-1.0"/>
        <param name="laser_z_max_value" value="1.0"/>
        <!-- Advertising config -->
        <param name="advertise_map_service" value="true"/>
        <param name="scan_subscriber_queue_size" value="$(arg scan_subscriber_queue_size)"/>
        <param name="scan_topic" value="$(arg scan_topic)"/>

        <param name="tf_map_scanmatch_transform_frame_name" value="$(arg tf_map_scanmatch_transform_frame_name)"/>
    </node>

    <!-- <arg name="rviz" default="true"/>
    <arg name="rviz_file" default="$(find sick_scan)/launch/rviz/hector.rviz"/>
    <node pkg="rviz" type="rviz" name="$(anon rviz)" args="-d $(arg rviz_file)" output="screen" if="$(arg rviz)"/> -->
</launch>
